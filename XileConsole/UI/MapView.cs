using Newtonsoft.Json;
using ReactiveUI;
using System;
using System.Reactive.Linq;
using Terminal.Gui;
using Terminal.Gui.Graphs;
using XileConsole.Events;
using XileConsole.MapData;
using XileConsole.Misc;

//------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.17.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace XileConsole
{
    public partial class MapView
    {
        List<MapInfo> mapInfos = new List<MapInfo>();
        List<string> mapNames = new List<string>();
        List<PointF> mapPoints = new List<PointF>();

        public MapView()
        {
            InitializeComponent();

            DataHandler.Instance.Init();
            MapIdentifier mapIdentifier = new MapIdentifier();
            mapIdentifier.Init();

            AddInitialColumns();
            if (MapDataSerializer.Instance.LoadMapInfos())
            {
                FetchMapData();

                SelectMapToDisplayFromList(0);
            }
            
            Eventbus.Instance.Suscribe<OnMapFinishedEvent>((sender, e) =>
            {
                AddMapToDisplay(e.mapInfo);
            });

            Eventbus.Instance.Suscribe<TrackerUpdateEvent>((sender, e) =>
            {
                UpdateTrackerDisplay();
            });

            Eventbus.Instance.Suscribe<ResetTrackerEvent>((sender, e) =>
            {
                ResetTrackerValues();
            });

            backButton.Clicked += () =>
            {
                Application.Run(new MainMenuView());
            };

            deleteMap.Clicked += () =>
            {
                MapDataSerializer.Instance.DeleteMapInfo(mapInfos[mapList.SelectedItem]);
                MapDataSerializer.Instance.SaveMapInfos();
                RemoveEntry(mapList.SelectedItem);
            };

            mapList.SelectedItemChanged += (ListViewItemEventArgs e) =>
            {
                SelectMapToDisplayFromList(mapList.SelectedItem);
            };

            startButton.Clicked += () =>
            {
                RTTracker.Instance.Start();
            };

            stopButton.Clicked += () =>
            {
                RTTracker.Instance.Stop();
            };

            resetButton.Clicked += () =>
            {
                RTTracker.Instance.Reset();
            };

        }

        private void UpdateTrackerDisplay()
        {
            trackerTotalTime.Text = "Total time: " + RTTracker.Instance.GetTotalTime().ToString("mm':'ss");
            trackerAvgTimePerMap.Text = "Avg time / map: " + RTTracker.Instance.GetAverageTimePerMap().ToString("mm':'ss");
            trackerAvgChaosPerMap.Text = "Avg value (c): " + RTTracker.Instance.GetAverageValuePerMap();
            trackerChaosPerHour.Text = "(c) / h: " + RTTracker.Instance.GetCurrencyPerHour(Currency.Chaos);
            trackerDivinePerHour.Text = "(d) / h: " + RTTracker.Instance.GetCurrencyPerHour(Currency.Divine);
        }

        private void ResetTrackerValues()
        {
            trackerTotalTime.Text = "Total time: 00:00";
            trackerAvgTimePerMap.Text = "Avg time / map: ";
            trackerAvgChaosPerMap.Text = "Avg value (c): ";
            trackerChaosPerHour.Text = "(c) / h: ";
            trackerDivinePerHour.Text = "(d) / h: ";
        }

        private void AddInitialColumns()
        {
            System.Data.DataTable tableViewTable;
            tableViewTable = new System.Data.DataTable();

            System.Data.DataColumn itemColumn;
            itemColumn = new System.Data.DataColumn();
            itemColumn.ColumnName = "Item";
            tableViewTable.Columns.Add(itemColumn);

            System.Data.DataColumn AmountColumn;
            AmountColumn = new System.Data.DataColumn();
            AmountColumn.ColumnName = "Amount";
            tableViewTable.Columns.Add(AmountColumn);

            System.Data.DataColumn PriceColumn;
            PriceColumn = new System.Data.DataColumn();
            PriceColumn.ColumnName = "Price (c)";
            tableViewTable.Columns.Add(PriceColumn);

            System.Data.DataColumn TotalPriceColumn;
            TotalPriceColumn = new System.Data.DataColumn();
            TotalPriceColumn.ColumnName = "Total (c)";
            tableViewTable.Columns.Add(TotalPriceColumn);

            /*foreach (var item in DataHandler.GetInstance().inventoryHandler.GetInventory())
            {
                tableViewTable.Rows.Add(item.name, item.stackSize, item.price.chaos, item.price.chaos * item.stackSize);
            }*/

            this.tableView.Table = tableViewTable;
            this.lastMapsBorder2.Add(this.tableView);
        }

        private void FetchMapData()
        {
            MapDataSerializer.Instance.mapInfoHolder.MapInfos.ForEach(mapInfo =>
            {
                AddMapToDisplay(mapInfo);
            });
        }

        private void RemoveEntry(int index)
        {
            mapInfos.RemoveAt(index);
            mapNames.RemoveAt(index);
            mapList.SetSource(mapNames);

            mapPoints.RemoveAt(mapPoints.Count-(index+1));

            for(int i = 0; i < mapPoints.Count; i++)
            {
                mapPoints[i] = new PointF(i, mapPoints[i].Y);
            }

            var points = new ScatterSeries()
            {
                Points = mapPoints
            };

            var lines = new PathAnnotation()
            {
                Points = mapPoints
            };

            lines.BeforeSeries = true;

            graphView.Series.Clear();
            graphView.Series.Add(points);
            graphView.Annotations.Clear();
            graphView.Annotations.Add(lines);

            AdjustGraphView();
            UpdateStatisticValues();
            SelectMapToDisplayFromList(0);
        }


        public void AddMapToDisplay(MapInfo mapInfo)
        {
            mapInfos.Insert(0, mapInfo);
            mapNames.Insert(0, mapInfo.enteredMapTimes[0] + " | " + mapInfo.mapName);
            mapList.SetSource(mapNames);            

            timeInMapStatistic.Text = "Time: "+mapInfo.timeInMap.ToString("mm':'ss");
            float cPh = (mapInfo.inventory.Sum() / (float)mapInfo.timeInMap.TotalMinutes * 60);
            chaosPerHourStatistic.Text = "(c) / h: " + cPh.Truncate(2).ToString();
            divinePerHourStatistic.Text = "(d) / h: " + (cPh / DataHandler.Instance.inventoryHandler.inventory.divinePrice).Truncate(2).ToString();
            PointF f = new PointF();
            f.X = mapInfos.Count;
            f.Y = mapInfo.inventory.Sum().Truncate(2);
            mapPoints.Add(f);

            var points = new ScatterSeries()
            {
                Points = mapPoints
            };

            var lines = new PathAnnotation()
            {
                Points = mapPoints
            };

            lines.BeforeSeries = true;

            graphView.Series.Clear();
            graphView.Series.Add(points);
            graphView.Annotations.Clear();
            graphView.Annotations.Add(lines);


            if(RTTracker.Instance.isRecording)
            {
                RTTracker.Instance.AddMap(mapInfo);
            }

            AdjustGraphView();

            UpdateStatisticValues();

            SelectMapToDisplayFromList(0); //redrawing often..
        }

        private void UpdateStatisticValues()
        {
            float avgMapValue = 0;

            foreach (var mi in mapInfos)
            {
                avgMapValue += mi.inventory.Sum();
            }
            avgMapValue /= mapInfos.Count;

            lastMapValueStatistic.Text = "Last map (c): " + mapInfos[0].inventory.Sum().Truncate(2).ToString();
            averageValuePerMap.Text = "Avg value (c): " + avgMapValue.Truncate(2);
            


            float totalChaosPerHour = 0;
            int count = 0;
            TimeSpan avgTimePerMap = TimeSpan.Zero;

            foreach (var mi in mapInfos)
            {
                if(mi.timeInMap == TimeSpan.Zero)
                {
                    continue;
                }
                avgTimePerMap += mi.timeInMap;
                count++;
                totalChaosPerHour += (mi.inventory.Sum() / (float)mi.timeInMap.TotalMinutes * 60);
            }

            if(avgTimePerMap > TimeSpan.Zero && count>0) 
            {
                totalChaosPerHour /= count;
                avgTimePerMap /= count;
            }
            else
            {
                Logger.Log("Something went wrong. Time per map was either 0 or count was 0");
            }
            
            
            averageTimePerMap.Text = "Avg time / map: "+avgTimePerMap.ToString("mm':'ss");

            averageChaosPerHour.Text = "Avg (c) / h: "+totalChaosPerHour.Truncate(2);
            averageDivinePerHour.Text = "Avg (d) / h: "+ (totalChaosPerHour/ DataHandler.Instance.inventoryHandler.inventory.divinePrice).Truncate(2);

        }

        public void AdjustGraphView()
        {
            //have to be hardcoded since graphView.Width or height cannot be converted to int
            int height = 22;
            int width = 78;

            float xPadding = 1.0f;
            float yPadding = 1.0f;

            if(mapPoints.Count > 0)
            {
                float maxX = mapPoints.MaxBy(max => max.X).X;
                float maxY = mapPoints.MaxBy(max => max.Y).Y;

                graphView.CellSize = new PointF((1.0f / width) * maxX + 0.1f, (1.0f / height) * maxY + 1f);
            }
            
        }

        public void SelectMapToDisplayFromList(int index)
        {
            if(mapInfos.Count == 0)
            {
                return;
            }

            System.Data.DataTable tableViewTable;
            tableViewTable = new System.Data.DataTable();

            System.Data.DataColumn itemColumn;
            itemColumn = new System.Data.DataColumn();
            itemColumn.ColumnName = "Item";
            tableViewTable.Columns.Add(itemColumn);

            System.Data.DataColumn AmountColumn;
            AmountColumn = new System.Data.DataColumn();
            AmountColumn.ColumnName = "Amount";
            tableViewTable.Columns.Add(AmountColumn);

            System.Data.DataColumn PriceColumn;
            PriceColumn = new System.Data.DataColumn();
            PriceColumn.ColumnName = "Price (c)";
            tableViewTable.Columns.Add(PriceColumn);

            System.Data.DataColumn TotalPriceColumn;
            TotalPriceColumn = new System.Data.DataColumn();
            TotalPriceColumn.ColumnName = "Total (c)";
            tableViewTable.Columns.Add(TotalPriceColumn);

            foreach (var item in mapInfos[index].inventory)
            {
                tableViewTable.Rows.Add(item.name, item.stackSize, item.price.chaos.Truncate(2), (item.price.chaos * item.stackSize).Truncate(2));
            }

            totalValuechaos.Text = "Total value (chaos): " + mapInfos[index].inventory.Sum().Truncate(2).ToString();
            totalValueDivine.Text = "Total value (divine): " + (mapInfos[index].inventory.Sum() / mapInfos[index].inventory.divinePrice).Truncate(2);

            this.tableView.Table = tableViewTable;
            this.lastMapsBorder2.Add(this.tableView);

            timeInMapInventory.Text = "Time spent in map: " + mapInfos[index].timeInMap.ToString("mm':'ss");
            chaosPerHourInventory.Text = "(c) / h: " + (mapInfos[index].inventory.Sum() / (float)mapInfos[index].timeInMap.TotalMinutes * 60).ToString();

            Application.Refresh();
        }
    }
}